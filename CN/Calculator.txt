Client -


#include <sys/types.h>
#include <sys/socket.h>
#include <stdio.h>
#include <string.h>
#include <sys/un.h>
#include <unistd.h>

int main(void) {
    int client_sockfd;
    int client_len;
    char out_buf[100], in_buf[100];
    struct sockaddr_un client_address;
    client_sockfd = socket(AF_UNIX, SOCK_STREAM, 0);
    client_address.sun_family = AF_UNIX;
    strcpy(client_address.sun_path, "server_socket");
    client_len = sizeof(client_address);
    printf("\n\nClient is requesting to server...\n");
    sleep(2);
    connect(client_sockfd, (struct sockaddr*)&client_address, client_len);

    while (1) {
        printf("Enter arithmetic expression (e.g., 3 + 5): ");
        fgets(out_buf, sizeof(out_buf), stdin);
        send(client_sockfd, out_buf, strlen(out_buf) + 1, 0);
        recv(client_sockfd, in_buf, sizeof(in_buf), 0);
        printf("Result from server: %s\n", in_buf);
    }

    close(client_sockfd);
    return 0;
}



Server :-




#include <sys/types.h>
#include <sys/socket.h>
#include <stdio.h>
#include <string.h>
#include <sys/un.h>
#include <unistd.h>

double evaluate(char* expression) {
    char operator;
    double operand1, operand2;
    sscanf(expression, "%lf %c %lf", &operand1, &operator, &operand2);
    switch (operator) {
        case '+': return operand1 + operand2;
        case '-': return operand1 - operand2;
        case '*': return operand1 * operand2;
        case '/': return operand1 / operand2;
        default: return 0.0;
    }
}

int main(void) {
    int server_sockfd, client_sockfd;
    int server_len, client_len;
    char in_buf[100], out_buf[100];
    struct sockaddr_un server_address, client_address;
    unlink("server_socket");
    server_sockfd = socket(AF_UNIX, SOCK_STREAM, 0);
    server_address.sun_family = AF_UNIX;
    strcpy(server_address.sun_path, "server_socket");
    server_len = sizeof(server_address);

    printf("\n\nServer is waiting for client response\n");
    bind(server_sockfd, (struct sockaddr*)&server_address, server_len);
    listen(server_sockfd, 5);
    client_len = sizeof(client_address);
    client_sockfd = accept(server_sockfd, (struct sockaddr*)&client_address, &client_len);
    printf("\n\nClient request is accepted by the server\n");

    while (1) {
        recv(client_sockfd, in_buf, sizeof(in_buf), 0);
        double result = evaluate(in_buf);
        snprintf(out_buf, sizeof(out_buf), "%lf", result);
        send(client_sockfd, out_buf, strlen(out_buf) + 1, 0);
    }

    close(server_sockfd);
    close(client_sockfd);
    return 0;
}
