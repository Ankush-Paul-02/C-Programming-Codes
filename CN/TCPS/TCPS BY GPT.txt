#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#define BUFFER_SIZE 256

int main(int argc, char **argv) {
    int sid, cid, n;
    struct sockaddr_in server_addr, client_addr;
    char server_ip[32], client_msg[BUFFER_SIZE], temp;

    if (argc == 1)
        strcpy(server_ip, "127.0.0.1");
    else
        strcpy(server_ip, argv[1]);

    // Create socket
    if ((sid = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Initialize server address struct
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = inet_addr(server_ip);
    server_addr.sin_port = htons(1234);

    // Bind socket
    if (bind(sid, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Bind failed");
        exit(EXIT_FAILURE);
    }

    // Listen for incoming connections
    if (listen(sid, 1) < 0) {
        perror("Listen failed");
        exit(EXIT_FAILURE);
    }

    // Accept connection
    socklen_t client_len = sizeof(client_addr);
    if ((cid = accept(sid, (struct sockaddr *)&client_addr, &client_len)) < 0) {
        perror("Accept failed");
        exit(EXIT_FAILURE);
    }

    // Communication loop
    while (1) {
        // Receive message from client
        if ((n = recv(cid, client_msg, BUFFER_SIZE, 0)) < 0) {
            perror("Receive failed");
            break;
        }

        if (n == 0) {
            printf("Client disconnected\n");
            break;
        }

        // Reverse the message
        for (int i = 0, j = n - 1; i < j; i++, j--) {
            temp = client_msg[i];
            client_msg[i] = client_msg[j];
            client_msg[j] = temp;
        }

        // Send reversed message back to client
        if (send(cid, client_msg, n, 0) < 0) {
            perror("Send failed");
            break;
        }

        // Check for exit condition
        if (strcmp(client_msg, "EXIT") == 0)
            break;
    }

    // Close sockets
    close(cid);
    close(sid);

    return 0;
}
